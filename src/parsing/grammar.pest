// Whitespace and Comments
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ line_comment | block_comment }
line_comment = _{ "//" ~ (!"\n" ~ ANY)* ~ ("\n" | EOI) }
block_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Keywords
keyword = @{ 
    "if" | "else" | "while" | "for" | "do" | "break" | "continue" | "return" |
    "struct" | "enum" | "union" | "typedef" | "sizeof" | "switch" | "case" | "default"
}

// Types
typing = { (identifier ~ array_suffix*) }
array_suffix = { "[" ~ expression? ~ "]" }

// Literals
number = @{ 
    hex_number |
    oct_number |
    float_number |
    dec_number
}
hex_number = { "0x" ~ ASCII_HEX_DIGIT+ ~ int_suffix? }
oct_number = { "0" ~ ASCII_OCT_DIGIT+ ~ int_suffix? }
dec_number = { ASCII_DIGIT+ ~ int_suffix? }
float_number = { 
    ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* ~ exp? ~ float_suffix? |
    "." ~ ASCII_DIGIT+ ~ exp? ~ float_suffix?
}
exp = { ("E" | "e") ~ ("+" | "-")? ~ ASCII_DIGIT+ }
int_suffix = { ("u" | "U") ~ ("l" | "L")? | ("l" | "L") ~ ("u" | "U")? }
float_suffix = { "f" | "F" | "l" | "L" }

string = @{ "\"" ~ (escape | !("\"" | "\\") ~ ANY)* ~ "\"" }
char = @{ "'" ~ (escape | !("'" | "\\") ~ ANY) ~ "'" }
escape = { "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "0" | "'" | oct_escape | hex_escape) }
oct_escape = { ASCII_OCT_DIGIT{1,3} }
hex_escape = { "x" ~ ASCII_HEX_DIGIT{2} }

// Array literals
array_literal = { "[" ~ (expression ~ ("," ~ expression)*)? ~ "]" | "{" ~ (expression ~ ("," ~ expression)*)? ~ "}" }

// Identifiers
identifier = @{ !keyword ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

// Operators
operator = { 
    "++" | "--" | "+" | "-" | "*" | "/" | "%" |
    "==" | "!=" | "<=" | ">=" | "<" | ">" |
    "&&" | "||" | "!" |
    "&=" | "|=" | "^=" | "+=" | "-=" | "*=" | "/=" | "%=" |
    "&" | "|" | "^" | "~" |
    "=" | "." | ","
}

// Punctuation
punctuation = { "(" | ")" | "[" | "]" | "{" | "}" | ";" | ":" | "?" }

// Variables
variable_declaration = { 
    typing ~ init_declarator_list ~ ";"
}

init_declarator_list = { init_declarator ~ ("," ~ init_declarator)* }
init_declarator = { identifier ~ array_suffix* ~ ("=" ~ initializer)? }
initializer = { array_literal | expression }

// Functions
function_declaration = {
    "fn" ~ identifier ~ "(" ~ parameter_list? ~ ")" ~ compound_statement ~ ";"?
}
parameter_list = {
    parameter ~ ("," ~ parameter)*
}
parameter = { typing ~ identifier? }

// Statements
statement = {
    compound_statement |
    struct_declaration |
    if_statement |
    while_statement |
    for_statement |
    do_while_statement |
    switch_statement |
    return_statement |
    break_statement |
    continue_statement |
    expression_statement |
    declaration_statement
}

compound_statement = { "{" ~ statement* ~ "}" }
if_statement = { "if" ~ "(" ~ expression ~ ")" ~ statement ~ ("else" ~ statement)? }
while_statement = { "while" ~ "(" ~ expression ~ ")" ~ statement }
for_statement = { 
    "for" ~ "(" ~ 
    (declaration_statement | expression_statement) ~ 
    expression? ~ ";" ~ 
    expression? ~ ")" ~ 
    statement 
}
do_while_statement = { "do" ~ statement ~ "while" ~ "(" ~ expression ~ ")" ~ ";" }
switch_statement = { 
    "switch" ~ "(" ~ expression ~ ")" ~ "{" ~ 
    case_statement* ~ 
    default_statement? ~ 
    "}" 
}
case_statement = { "case" ~ constant_expression ~ ":" ~ statement* }
default_statement = { "default" ~ ":" ~ statement* }
return_statement = { "return" ~ expression? ~ ";" }
break_statement = { "break" ~ ";" }
continue_statement = { "continue" ~ ";" }
expression_statement = { expression? ~ ";" }
declaration_statement = { init_declarator_list ~ ";" }

// Expressions
expression = { assignment_expression ~ ("," ~ assignment_expression)* }
assignment_expression = { conditional_expression ~ (operator ~ assignment_expression)? }
conditional_expression = { logical_or_expression ~ ("?" ~ expression ~ ":" ~ conditional_expression)? }
logical_or_expression = { logical_and_expression ~ ("||" ~ logical_and_expression)* }
logical_and_expression = { relational_expression ~ ("&&" ~ relational_expression)* }
equality_expression = { relational_expression ~ (("==" | "!=") ~ relational_expression)* }
relational_expression = { additive_expression ~ (("<" | ">" | "<=" | ">=") ~ additive_expression)* }
additive_expression = { multiplicative_expression ~ (("+") ~ multiplicative_expression)* }
negation_expression = { multiplicative_expression ~ ("-" ~ multiplicative_expression)* }
multiplicative_expression = { unary_expression ~ ((multiplication | division | modulo) ~ unary_expression)* }
multiplication = { "*" }
division = { "/" }
modulo = { "%" }
unary_expression = { 
    ("++" | "--") ~ unary_expression |
    unary_operator ~ unary_expression |
    postfix_expression
}
unary_operator = { "+" | "-" | "~" | "!" }
postfix_expression = { 
    primary_expression ~ 
    (
        array_access |
        function_call |
        member_access |
        "++" | "--"
    )*
}

array_access = { "[" ~ expression ~ "]" }
function_call = { "(" ~ argument_expression_list? ~ ")" }
member_access = { "." ~ identifier }

primary_expression = { 
    identifier | number | char | string | array_literal |
    "(" ~ expression ~ ")"
}
struct_declaration = { "struct" ~ identifier ~ "{" ~ field_declaration_list ~ "}" }
field_declaration_list = { (field_declaration)* }
field_declaration = { typing ~ identifier ~ ";" }
argument_expression_list = { assignment_expression ~ ("," ~ assignment_expression)* }
constant_expression = { conditional_expression }

// Program
program = { 
    SOI ~ 
    (function_declaration | declaration_statement | struct_declaration | for_statement | expression ~ ";")* ~ 
    EOI 
}
